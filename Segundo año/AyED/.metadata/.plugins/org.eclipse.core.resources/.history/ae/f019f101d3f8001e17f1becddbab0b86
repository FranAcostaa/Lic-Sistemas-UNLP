package ejercicio5;
import ejercicio2.Queue;
import ejercicio2.BinaryTree;

public class ProfundidadDeArbolBinario {
	BinaryTree<Integer> tree;
	
	
	public ProfundidadDeArbolBinario(BinaryTree<Integer> arb) {
		this.tree = arb;
	}
	
	public int sumaElementosProfundidad(int level) {
		return sumaElementos(this.tree,level);
	}
	
	public int sumaElementos(BinaryTree<Integer> ab, int level){
		BinaryTree<Integer> arb = null;
		Queue<BinaryTree<Integer>> cola = new Queue<BinaryTree<Integer>>();
		int nivelActual = 0;
		int suma = 0;
		cola.enqueue(ab);
		cola.enqueue(null);
		while (!cola.isEmpty()) {
			ab = cola.dequeue();
			if (ab != null) {
				if(nivelActual == level)
					suma+= ab.getData();
				if (ab.hasLeftChild())
					cola.enqueue(ab.getLeftChild());
				if (ab.hasRightChild()) 
					cola.enqueue(ab.getRightChild());
			}
			else if (!cola.isEmpty()) {
				nivelActual++;
				if (nivelActual > level)
						break;
				cola.enqueue(null);
			}
		}
		return suma;
	}
	
	public static void main(String []args) {
        BinaryTree<Integer> arb = new BinaryTree<Integer>(10);
        arb.addLeftChild(new BinaryTree<Integer>(2));
        arb.addRightChild(new BinaryTree<Integer>(3));
        arb.getLeftChild().addLeftChild(new BinaryTree<Integer>(5));
        arb.getLeftChild().addRightChild(new BinaryTree<Integer>(4));
        arb.getRightChild().addLeftChild(new BinaryTree<Integer>(9));
        arb.getRightChild().addRightChild(new BinaryTree<Integer>(8));
        arb.getLeftChild().getLeftChild().addLeftChild(new BinaryTree<Integer>(7));
        arb.getLeftChild().getLeftChild().addRightChild(new BinaryTree<Integer>(8));
        arb.getRightChild().getLeftChild().addLeftChild(new BinaryTree<Integer>(12));
        arb.getRightChild().getRightChild().addLeftChild(new BinaryTree<Integer>(2));
        
        ProfundidadDeArbolBinario tree = new ProfundidadDeArbolBinario(arb);
        
        System.out.println(tree.sumaElementosProfundidad(1));
        
	}
}